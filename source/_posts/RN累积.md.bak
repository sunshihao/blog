---
title: RN 累积（长期有效）
date: 2019-02-28 
tags: RN react
---

# RN 累积（长期有效）

![9de822cb608bab1ed5221b64000e926e.png](en-resource://database/10616:1)
我使用了以上的方式感觉不好用（X）![fd488d16a5620f40a7cf4af2b55b2494.png](en-resource://database/10618:1)
实质为将这个控件放到了类属性中。类属性， 实例属性之间是有很大的区别的遂用了这个  测试后以上两个都好用，之前不好用的原因因为在componentWillMount之前调用的组件没形成20180816  布局属性研究// height:'100%',// width: Dimensions.get('window').width-scaleSize(74.96),flex:1,marginLeft:scaleSize(37.48),marginRight:scaleSize(37.48),marginTop:scaleSize(18.74),flexDirection: 'column’,如果一个view用margin限制了其大小的话，其画布的大小可以直接用flex撑满而如果用百分比的话是屏幕的百分比你需要减去margin的数值才能得到真正的画布大小20180815 布局参数flexDirection 在组件style中指定flexDirection 可以决定布局的主轴。子元素是应该沿着水平轴（row）方向排列名字之中有一个Direction彰显其的不凡，说明了与flex的结合说明了其设置主轴方向的身份justifyContent 主轴子元素的排列方式 （英文好像是确定布局的意思）                        参数：flex-start,center,flex-end,space-around,space-betweenalignItems 子元素沿次轴的排列方式 ，参数同上alignItems 决定子元素在次轴方向的排列方式（此样式设置在父元素上）类型：flex-start flex-end center stretch baselineJustify-content 属性定义了浏览器如何分配顺着父容器主轴的弹性元素之间机器周围的空间20180815 antd-mobile-rn 中Grid控件中data的本地数据准备![42700f80c150c36a7bc6726104374a45.png](en-resource://database/10620:1)
20180815 navigation的使用理解createStackNavigator为你的应用程序提供一种在每个新屏幕放置在堆栈顶部的屏幕之间转换的方法。默认情况下，stack navigator 被配置为具有熟悉的iOS和Android外观 &amp; 感觉：新屏幕从iOS右侧滑入，从Android底部淡入。 在iOS上，stack navigator 也可以配置为屏幕从底部滑入的模式样式。API 定义createStackNavigator(RouteConfigs, StackNavigatorConfig);RouteConfigs路由配置对象是从路由名称到路由配置的映射，它告诉导航器该路由呈现的内容。createStackNavigator({  // For each screen that you can navigate to, create a new entry like this:  Profile: {    // `ProfileScreen` is a React component that will be the main content of the screen.    screen: ProfileScreen,    // When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.    // Optional: When deep linking or using react-navigation in a web app, this path is used:    path: 'people/:name',    // The action and route params are extracted from the path.    // Optional: Override the `navigationOptions` for the screen    navigationOptions: ({ navigation }) =&gt; ({      title: `${navigation.state.params.name}'s Profile'`,    }),  },  ...MyOtherRoutes,});StackNavigatorConfig路由的选项：* initialRouteName - 设置堆栈的默认屏幕。 必须匹配路由配置中的某个 Key。* initialRouteParams - 初始路由的参数* initialRouteKey - 初始路由的可选标识符* navigationOptions - 用于屏幕的默认导航选项* paths - 覆盖路由配置中设置的路径的映射视觉选项：* mode - 定义渲染和转换的样式：    * card - 使用标准的 iOS 和 Android 屏幕转换。 这是默认设置。    * 模式 -使屏幕从底部滑动, 这是一个常见的 iOS 模式。仅在 iOS 上工作, 对 Android 没有影响。* headerMode -指定页眉的呈现方式:    * 浮点 -呈现一个位于顶部的单个页眉, 并在屏幕被更改时进行动画显示。这是 iOS 上常见的模式。    * 屏幕 -每个屏幕都有一个标头, 并且页眉随屏幕一起淡入和淡出。这是 Android 的常见模式。    * 无 -不会呈现页眉。* headerBackTitleVisible - 提供合理的默认值以确定后退按钮标题是否可见，但如果要覆盖它，则可以使用true或` false &lt; /code&gt;在此选项中。* headerTransitionPreset` -指定页眉应如何从一个屏幕过渡到另一屏时 `headerMode: float` 已启用。 * `fade-in-place` - Header 组件淡出而不移动, 类似于 Twitter、Instagram 和 Facebook 应用程序的 iOS。这是默认值。 * `uikit` -iOS 的默认行为的近似值。 * `headerLayoutPreset` - 指定 Header 组件如何布局 * `left` - 将标题锚定在左侧，靠近后退按钮或其他左侧组件。 在 Android 上默认的。 在 iOS 上，Header 组件的返回标题是隐藏的 左侧组件的内容将在标题下方溢出，如果你需要调整此内容，可以使用` headerLeftContainerStyle `和` headerTitleContainerStyle `。 此外，此对齐与`headerTransitionPreset: 'ui-kit'`不兼容。 * `center` - 将标题居中，这是iOS上的默认设置。 * ` cardStyle ` - 使用此 props 覆盖或扩展堆栈中单个 Card 的默认样式。 * `transitionConfig` 函数返回与默认屏幕转换合并的对象 (查看 TransitionConfig 中的 [类型定义](https://github.com/react-navigation/react-navigation/blob/master/flow/react-navigation.js)). 提供的函数将传递以下参数: * `transitionProps` -新屏幕的过渡道具。 * `prevTransitionProps` -为旧屏幕过渡道具。 * `isModal` -布尔值指定屏幕是否为模式。 * `onTransitionStart` -当卡过渡动画即将启动时要调用的函数。 * `onTransitionEnd` -在卡过渡动画完成后调用的函数。用于导航器内部页面的navigationOptions标题可用作 headerTitle 的回退的字符串。 此外, 将用作 tabBarLabel 的回退 (如果嵌套在 TabNavigator 中) 或 drawerLabel (如果嵌套在DrawerNavigator)。header响应元素或函数, 给定 HeaderProps 返回一个响应元素, 以显示为页眉。设置为 null 隐藏页眉。headerTitleHeader 使用的字符串，React 元素或React组件。 默认是页面的 title 当一个组件被使用时，它会接受 allowFontScaling、 style 和 children 这几个 props。 标题字符串在children中传递。headerTitleAllowFontScalingAllowFontScaling -无论标签字体是否应缩放以尊重文字大小可访问性设置，默认值都是 true。headerBackImageReact 元素或组件在标题的后退按钮中显示自定义图片。 当组件被调用时，它会在渲染时收到许多 props 如：（tintColor，title）。 默认为带有 react-navigation/views/assets/back-icon.png 这张图片的组件，后者是平台的默认后图标图像（iOS上为向左的符号，Android上为箭头）。headerBackTitleIos 上的后退按钮使用的标题字符串, 或 null 禁用标签。 默认为上一个场景的 headerTitle。 headerBackTitle 必须在源屏幕 (而不是目标屏幕) 中定义。 例如, 当您将 A 转换为 B, 并且要禁用 B 上的 headerBackTitle:StackNavigator({  A: {    screen: AScreen,    navigationOptions: () =&gt; ({      title: `A`,      headerBackTitle: null    }),  },  B: {    screen: BScreen,    navigationOptions: () =&gt; ({      title: `B`,    }),  }});headerTruncatedBackTitle当 headerBackTitle 在屏幕上不适合时, &quot;后退&quot; 按钮使用的标题字符串。 默认情况下 &quot;后退&quot;。 headerBackTitle 必须在源屏幕 (而不是目标屏幕) 中定义。 例如, 当您将 A 转换为 B, 并且要禁用 B 上的 headerBackTitle:StackNavigator({  A: {    screen: AScreen,    navigationOptions: () =&gt; ({      title: `A`,      headerBackTitle: 'A much too long text for back button from B to A',      headerTruncatedBackTitle: `to A`    }),  },  B: {    screen: BScreen,    navigationOptions: () =&gt; ({      title: `B`,    }),  }});headerRight在标题栏右侧展示的 React 组件。headerLeft在标题栏左侧展示的 React 元素或组件。 使用组件时，它在渲染时会收到许多 prop（onPress、title、titleStyle等等 - 检查&lt;a href =“ https://github.com/react-navigation/react-navigation/blob/master/src/views/Header/Header.js&quot;&gt;Header.js 获取完整列表）。headerStyle标题的样式对象headerForceInset允许将 forceInset 对象传递给页眉中使用的内部 SafeAreaView。headerTitleStyle标题组件的样式对象headerBackTitleStyle返回标题的样式对象headerLeftContainerStyle自定义 headerLeft 组件容器的样式，例如，增加 padding。headerRightContainerStyle自定义 headerRight 组件容器的样式,，例如，增加 padding。headerTitleContainerStyle自定义 headerTitle 组件容器的样式, 例如，增加 padding。headerTintColor页眉的淡色颜色headerPressColorAndroid颜色为材料波纹 (Android &gt;= 5.0)headerTransparent默认为 false。如果 true, 则标头将不会有背景, 除非您显式提供 headerStyle 或 headerBackground。headerBackground与headerTransparent一起使用，以提供在标题后台呈现的组件。 例如，您可以使用模糊视图来创建半透明标题。gesturesEnabled是否允许使用手势来关闭页面，在 iOS 上默认为true，在 Android 上默认为false。gestureResponseDistance用于覆盖从屏幕边缘开始触摸的距离以识别手势的对象。 它具有以下属性：    * horizontal - number - 水平方向的距离。默认 25。    * vertical - number - 垂直方向的距离，默认 135.gestureDirection用于覆盖关闭手势方向的字符串。 正常行为使用default，从右向左滑动设置为reverse。Navigator PropsStackNavigator(...)创建的 navigator 组件使用下面这些 props：    * screenProps - 向下传递多余的选项到子页面，例如：* const SomeStack = createStackNavigator({  // config});&lt;SomeStack  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}/&gt;例子请参阅可以作为 NavigationPlayground app 的一部分在本地运行的例子： SimpleStack.js 和 ModalStack.js您可以通过访问 our expo demo 来直接在您的手机上查看这些示例。具有自定义屏幕转换动画的 Modal StackNavigator* const ModalNavigator =createStackNavigator(  {    Main: { screen: Main },    Login: { screen: Login },  },  {    headerMode: 'none',    mode: 'modal',    navigationOptions: {      gesturesEnabled: false,    },    transitionConfig: () =&gt; ({      transitionSpec: {        duration: 300,        easing: Easing.out(Easing.poly(4)),        timing: Animated.timing,      },      screenInterpolator: sceneProps =&gt; {        const { layout, position, scene } = sceneProps;        const { index } = scene;        const height = layout.initHeight;        const translateY = position.interpolate({          inputRange: [index - 1, index, index + 1],          outputRange: [height, 0, 0],        });        const opacity = position.interpolate({          inputRange: [index - 1, index - 0.99, index],          outputRange: [0, 1, 1],        });        return { opacity, transform: [{ translateY }] };      },    }),  });也可以使用 headerLeftInterpolator、 headerTitleInterpolator 和 headerRightInterpolator 字段 transitionConfig。20180815 RN中对屏幕的宽高的获取Dimensions.get(‘window’).width 20180804 RN 样式中对绝对位置的使用ES6绝对位置的使用&lt;View style={{position: 'absolute', height: 60, width: 45, bottom: 20, right: 20}}                      opacity={this.state.isVisible}&gt;                    &lt;TouchableOpacity onPress={() =&gt; {                        // 做成悬浮回到最上的按钮                        this.state.isVisible != 0 ? this._flatList.scrollToIndex({viewPosition: 0, index: 0}) : '';                    }}&gt;                        &lt;Image                            source={require('../../assets/images/upload.png')}                            style={{height: 50, width: 50}}                        /&gt;                    &lt;/TouchableOpacity&gt;                &lt;/View&gt;
